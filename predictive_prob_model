from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
import numpy as np

def train_trade_probability_model(data):
    # Binary target
    data['traded_flag'] = (data['traded'] > 0).astype(int)

    # Broker-Ticker combo
    data['broker_ticker_combo'] = data['room_name'].astype(str) + "_" + data['ticker'].astype(str)

    # Feature Engineering
    if 'ask' in data.columns and 'bid' in data.columns:
        data['spread'] = data['ask'] - data['bid']
    else:
        data['spread'] = 0  # fallback if not available
    
    data['log_amount'] = np.log1p(data['amount'])  # log(1+amount)

    # Features and target
    features = ['broker_ticker_combo', 'implied_financing_traded', 'log_amount', 'spread']
    x = data[features].copy()
    y = data['traded_flag']

    # Ensure correct types
    x['broker_ticker_combo'] = x['broker_ticker_combo'].astype(str)
    for col in ['implied_financing_traded', 'log_amount', 'spread']:
        x[col] = pd.to_numeric(x[col], errors='coerce')

    # Split data
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

    # Preprocessor
    categorical_features = ['broker_ticker_combo']
    numerical_features = ['implied_financing_traded', 'log_amount', 'spread']

    preprocessor = ColumnTransformer([
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

    # RandomForest Model with class balancing
    rf_model = RandomForestClassifier(
        n_estimators=300,
        max_depth=None,
        random_state=42,
        class_weight='balanced'
    )

    # Pipeline
    model = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('classifier', rf_model)
    ])

    # Train
    model.fit(x_train, y_train)

    return model
