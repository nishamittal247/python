import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.calibration import CalibratedClassifierCV
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score

# -------------------------------
# 1. Load and preprocess data
# -------------------------------
data = pd.read_excel("C:/Users/h71125/Dashboard_project/data_sample.xlsx", sheet_name=0)
data = data.fillna(0)

# Define target variable
data['traded_flag'] = (data['traded'] > 0).astype(int)

# Create dealer-ticker interaction feature
data['dealer_ticker_combo'] = data['room_name'].astype(str) + "_" + data['ticker'].astype(str)

# Create historical trade count feature
trade_counts = data.groupby(['room_name', 'ticker'])['traded_flag'].sum().reset_index(name='dealer_ticker_trade_count')
data = data.merge(trade_counts, on=['room_name', 'ticker'], how='left')

# Final feature set
X = data[['room_name', 'ticker', 'implied_financing_traded', 'dealer_ticker_combo', 'dealer_ticker_trade_count']]
y = data['traded_flag']

# -------------------------------
# 2. Train-test split
# -------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -------------------------------
# 3. Define preprocessing
# -------------------------------
categorical_features = ['room_name', 'ticker', 'dealer_ticker_combo']
numerical_features = ['implied_financing_traded', 'dealer_ticker_trade_count']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ]
)

# -------------------------------
# 4. Model with calibration
# -------------------------------
rf_model = RandomForestClassifier(n_estimators=200, max_depth=None, random_state=42)
calibrated_rf = CalibratedClassifierCV(base_estimator=rf_model, method='isotonic', cv=3)

model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', calibrated_rf)
])

# -------------------------------
# 5. Train model
# -------------------------------
model.fit(X_train, y_train)

# -------------------------------
# 6. Evaluate model
# -------------------------------
y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)[:, 1]

print("Accuracy:", accuracy_score(y_test, y_pred))
print("ROC AUC Score:", roc_auc_score(y_test, y_pred_proba))
print("Classification Report:\n", classification_report(y_test, y_pred))

# -------------------------------
# 7. Predict function
# -------------------------------
# Store training pairs for unseen combo check
training_pairs = set(zip(X_train['room_name'], X_train['ticker']))

def predict_trade_probability(room_name, ticker, financing_level):
    dealer_ticker_combo = f"{room_name}_{ticker}"
    # Historical trade count (0 if unseen)
    trade_count = trade_counts.loc[
        (trade_counts['room_name'] == room_name) & (trade_counts['ticker'] == ticker),
        'dealer_ticker_trade_count'
    ]
    trade_count = trade_count.values[0] if len(trade_count) > 0 else 0

    input_data = pd.DataFrame([{
        'room_name': room_name,
        'ticker': ticker,
        'implied_financing_traded': financing_level,
        'dealer_ticker_combo': dealer_ticker_combo,
        'dealer_ticker_trade_count': trade_count
    }])

    prob = model.predict_proba(input_data)[0, 1]

    # Clip probability for unseen dealer-ticker combos
    if (room_name, ticker) not in training_pairs:
        prob = min(prob, 0.2)

    return prob

# -------------------------------
# 8. Example usage
# -------------------------------
result = predict_trade_probability('Magen', 'AAPL', 44)
print(f"Predicted trade probability for Magen - AAPL at financing 44: {result:.3f}")
